name: Local CI/CD for Kubernetes (Self-Hosted)

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: profile-ui
  SERVICE_NAME: profile-ui
  DEPLOYMENT_NAME: profile-ui-deployment
  CONTAINER_NAME: profile-ui-container
  KUBE_PORT: 3011
  APP_PORT: 4011
  NAMESPACE: profile-ui

jobs:
  build-and-deploy-local:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Apply K8s Manifests
        run: kubectl apply -f deployment/

      - name: Build NPM package
        run: |
          npm install
          npm run build        
 
      - name: Build local Docker image
        run: |
          IMAGE_TAG="${{ env.IMAGE_NAME }}:${{ github.sha }}"
          docker build -t $IMAGE_TAG .
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Load image into KIND cluster
        run: kind load docker-image ${{ env.IMAGE_TAG }} --name unraid-ubuntu-prod

      - name: Create/Update K8s Secrets and ConfigMaps
        env:
          VITE_APP_API_BASE_URL: ${{ vars.VITE_APP_API_BASE_URL }}
          VITE_APP_TO_EMAIL: ${{ vars.VITE_APP_TO_EMAIL }}
        run: |
          kubectl create configmap profile-ui-config \
            --from-literal=VITE_APP_API_BASE_URL=${{ env.VITE_APP_API_BASE_URL }} \
            --dry-run=client -o yaml | kubectl apply -n ${{ env.NAMESPACE }} -f -

          kubectl create configmap profile-ui-config \
            --from-literal=VITE_APP_TO_EMAIL=${{ env.VITE_APP_TO_EMAIL }} \
            --dry-run=client -o yaml | kubectl apply -n ${{ env.NAMESPACE }} -f -            

      - name: Deploy to Kubernetes
        run: |
          echo "Updating deployment with image: ${{ env.IMAGE_TAG }}"
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }} ${{ env.CONTAINER_NAME }}=${{ env.IMAGE_TAG }}
          
          kubectl rollout restart deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }}
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.NAMESPACE }}

      - name: Restart Port-Forward Service
        run: |
          sudo systemctl restart profile-ui-port-forward.service
          
          echo "Port-forward service has been signaled to restart."

      - name: Clean Up Unused Docker Images
        if: always()
        run: |
          echo "--- Cleaning up dangling Docker images ---"
          docker image prune -a --filter "until=24h" -f